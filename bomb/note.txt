
1. phase 1
"Border relations with Canada have never been better."

use objdump disassemble the bomb,get the code below,
before the callq,
since %edi(rdi) is the first argument, which is user input,the second argument %esi must points to phase_1
use gdb command 'print (char*)0x402400'

###
0000000000400ee0 <phase_1>:
  400ee0:	48 83 ec 08          	sub    $0x8,%rsp
  400ee4:	be 00 24 40 00       	mov    $0x402400,%esi
  400ee9:	e8 4a 04 00 00       	callq  401338 <strings_not_equal>


2. phase_2
"1 2 4 8 16 32"
function read_six_numbers uses sscanf(&input_string,"%d %d %d %d %d %d",address...),
reads 6 num to the stack memory of phase_2 function. (%rsp to %rsp+0x14, rsp is the stack pointer of phase_2)
phase_2 functions iterate from %rsp+4 to %rsp+0x14, check if every num (%rbx) is twice as the previous num(%rbx-4).


3. phase_3
"0 207"
something like:
phase_3(char* input){
	int r = sscanf(input, "%d %d", x,y);
	if(r<=1)explode_bomb();
	if(x>7) explode_bomb();
	int z;
	switch(x){
		case 0:
			z = 0xcf; //207
		...
		...		
	}
	if(y!=z) explode_bomb();
	return;
}

4. phase_4
"0 0"
read two numbers a and b, 
call func4(a,0,0xe), 
the return value of fun4 and b must be 0;

c code be like:
phase_4(char* input){
	int a;  // 0x8(%rsp)
	int b;  // 0xc(%rsp)
	int r = sscanf(input,"%d %d", &a, &b);
	if(r!=2) explode_bomb();
	if(a>0xe) explode_bomb();
	int edx = 0xe;
	int esi = 0x0;
	int edi = a;
	int eax = func4(edi,esi,edx);
	if(eax!=0) explode_bomb();
	if(0!=b)explode_bomb();
	return;
}
func4(int a, int b, int c){
	int eax = a;
	eax = eax-b;
	int ecx = eax;
	ecx = ecx >> 0x1f;
	eax = eax+ecx;
	eax >>=1;
	ecx = eax+b;
	if(ecx > a){
		c = ecx-1;
		int r = func4(a,b,c);
		r = r*2;
		return eax;
	}else{
		eax = 0;
		if(ecx>=a){
			return eax;
		}
		b = ecx+1;
		eax = func4(a,b,c)
		eax = 1+eax+eax;
		return eax;
}

5. phase_5
"ionefg"
%fs:0x28 is the canary value which prevents buffer overflow attack

0000000000401062 <phase_5>:
  401062:	53                   	push   %rbx
  401063:	48 83 ec 20          	sub    $0x20,%rsp
  401067:	48 89 fb             	mov    %rdi,%rbx
  40106a:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax		// canary->%rax
  401071:	00 00 
  401073:	48 89 44 24 18       	mov    %rax,0x18(%rsp)		// canary->0x18(%rsp)
  401078:	31 c0                	xor    %eax,%eax		// set %eax = 0
  40107a:	e8 9c 02 00 00       	callq  40131b <string_length>	// strlen(input)
  40107f:	83 f8 06             	cmp    $0x6,%eax
  401082:	74 4e                	je     4010d2 <phase_5+0x70>	// if len!=6 explode_bomb
  401084:	e8 b1 03 00 00       	callq  40143a <explode_bomb>
  401089:	eb 47                	jmp    4010d2 <phase_5+0x70>
  40108b:	0f b6 0c 03          	movzbl (%rbx,%rax,1),%ecx	// for(i=0;i<6;++i){  ecx = input[i]
  40108f:	88 0c 24             	mov    %cl,(%rsp)		// %cl =lower 8 bit of %rcx
  401092:	48 8b 14 24          	mov    (%rsp),%rdx
  401096:	83 e2 0f             	and    $0xf,%edx		// edx = 0xf & input[i]
  401099:	0f b6 92 b0 24 40 00 	movzbl 0x4024b0(%rdx),%edx	// %dl = somestr[input[i] & 0xf]
					// "maduiersnfotvbylSo you think you can stop the bomb with ctrl-c, do you?" at 0x4024b0
					// flyers --9fe567 
					// look at ASCII table, got i(69)o(6f)n(6e)efg(65,66,67) ionefg				


  4010a0:	88 54 04 10          	mov    %dl,0x10(%rsp,%rax,1)	//copy dl to stack + i
  4010a4:	48 83 c0 01          	add    $0x1,%rax
  4010a8:	48 83 f8 06          	cmp    $0x6,%rax
  4010ac:	75 dd                	jne    40108b <phase_5+0x29>
  4010ae:	c6 44 24 16 00       	movb   $0x0,0x16(%rsp)
  4010b3:	be 5e 24 40 00       	mov    $0x40245e,%esi		
						// "flyers" 

  4010b8:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
  4010bd:	e8 76 02 00 00       	callq  401338 <strings_not_equal>	// check if equal, otherwise explode_bomb
  4010c2:	85 c0                	test   %eax,%eax
  4010c4:	74 13                	je     4010d9 <phase_5+0x77>
  4010c6:	e8 6f 03 00 00       	callq  40143a <explode_bomb>
  4010cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
  4010d0:	eb 07                	jmp    4010d9 <phase_5+0x77>
  4010d2:	b8 00 00 00 00       	mov    $0x0,%eax
  4010d7:	eb b2                	jmp    40108b <phase_5+0x29>
  4010d9:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
  4010de:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax
  4010e5:	00 00 
  4010e7:	74 05                	je     4010ee <phase_5+0x8c>
  4010e9:	e8 42 fa ff ff       	callq  400b30 <__stack_chk_fail@plt>
  4010ee:	48 83 c4 20          	add    $0x20,%rsp
  4010f2:	5b                   	pop    %rbx
  4010f3:	c3                   	retq   


6. phase_6
""


00000000004010f4 <phase_6>:
  4010f4:	41 56                	push   %r14
  4010f6:	41 55                	push   %r13
  4010f8:	41 54                	push   %r12
  4010fa:	55                   	push   %rbp
  4010fb:	53                   	push   %rbx				//callee saved registers
  4010fc:	48 83 ec 50          	sub    $0x50,%rsp
  401100:	49 89 e5             	mov    %rsp,%r13
  401103:	48 89 e6             	mov    %rsp,%rsi
  401106:	e8 51 03 00 00       	callq  40145c <read_six_numbers>	
							// %rdi-> input_string, %rsi -> %rsp
							// read 6 numbers into (%rsp) ~  0x14(%rsp)

  40110b:	49 89 e6             	mov    %rsp,%r14
  40110e:	41 bc 00 00 00 00    	mov    $0x0,%r12d
  401114:	4c 89 ed             	mov    %r13,%rbp	// %rbp == %r13 ==  %rsp
  401117:	41 8b 45 00          	mov    0x0(%r13),%eax	// first number
  40111b:	83 e8 01             	sub    $0x1,%eax	// first number -1
  40111e:	83 f8 05             	cmp    $0x5,%eax		
  401121:	76 05                	jbe    401128 <phase_6+0x34>	// <= 5
  401123:	e8 12 03 00 00       	callq  40143a <explode_bomb>
  401128:	41 83 c4 01          	add    $0x1,%r12d	// r12d+ 1 (before, %r12d == 0x0)
  40112c:	41 83 fc 06          	cmp    $0x6,%r12d
  401130:	74 21                	je     401153 <phase_6+0x5f>		// if r12d == 6 jump
  401132:	44 89 e3             	mov    %r12d,%ebx			// r12d -> ebx
  401135:	48 63 c3             	movslq %ebx,%rax			// (%rsp + 4*r12d) -> eax;
  401138:	8b 04 84             	mov    (%rsp,%rax,4),%eax
  40113b:	39 45 00             	cmp    %eax,0x0(%rbp)			// if eax ==first_num, explode_bomb
  40113e:	75 05                	jne    401145 <phase_6+0x51>		
  401140:	e8 f5 02 00 00       	callq  40143a <explode_bomb>
  401145:	83 c3 01             	add    $0x1,%ebx			// ebx++  (before, %ebx = %r12d)
  401148:	83 fb 05             	cmp    $0x5,%ebx			// if( %r12d+1 <=5 goto 401135)
  40114b:	7e e8                	jle    401135 <phase_6+0x41>
  40114d:	49 83 c5 04          	add    $0x4,%r13
  401151:	eb c1                	jmp    401114 <phase_6+0x20>
  401153:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
  401158:	4c 89 f0             	mov    %r14,%rax
  40115b:	b9 07 00 00 00       	mov    $0x7,%ecx
  401160:	89 ca                	mov    %ecx,%edx
  401162:	2b 10                	sub    (%rax),%edx
  401164:	89 10                	mov    %edx,(%rax)
  401166:	48 83 c0 04          	add    $0x4,%rax
  40116a:	48 39 f0             	cmp    %rsi,%rax
  40116d:	75 f1                	jne    401160 <phase_6+0x6c>
  40116f:	be 00 00 00 00       	mov    $0x0,%esi
  401174:	eb 21                	jmp    401197 <phase_6+0xa3>
  401176:	48 8b 52 08          	mov    0x8(%rdx),%rdx
  40117a:	83 c0 01             	add    $0x1,%eax
  40117d:	39 c8                	cmp    %ecx,%eax
  40117f:	75 f5                	jne    401176 <phase_6+0x82>
  401181:	eb 05                	jmp    401188 <phase_6+0x94>
  401183:	ba d0 32 60 00       	mov    $0x6032d0,%edx
  401188:	48 89 54 74 20       	mov    %rdx,0x20(%rsp,%rsi,2)
  40118d:	48 83 c6 04          	add    $0x4,%rsi
  401191:	48 83 fe 18          	cmp    $0x18,%rsi
  401195:	74 14                	je     4011ab <phase_6+0xb7>
  401197:	8b 0c 34             	mov    (%rsp,%rsi,1),%ecx
  40119a:	83 f9 01             	cmp    $0x1,%ecx
  40119d:	7e e4                	jle    401183 <phase_6+0x8f>
  40119f:	b8 01 00 00 00       	mov    $0x1,%eax
  4011a4:	ba d0 32 60 00       	mov    $0x6032d0,%edx
  4011a9:	eb cb                	jmp    401176 <phase_6+0x82>
  4011ab:	48 8b 5c 24 20       	mov    0x20(%rsp),%rbx
  4011b0:	48 8d 44 24 28       	lea    0x28(%rsp),%rax
  4011b5:	48 8d 74 24 50       	lea    0x50(%rsp),%rsi
  4011ba:	48 89 d9             	mov    %rbx,%rcx
  4011bd:	48 8b 10             	mov    (%rax),%rdx
  4011c0:	48 89 51 08          	mov    %rdx,0x8(%rcx)
  4011c4:	48 83 c0 08          	add    $0x8,%rax
  4011c8:	48 39 f0             	cmp    %rsi,%rax
  4011cb:	74 05                	je     4011d2 <phase_6+0xde>
  4011cd:	48 89 d1             	mov    %rdx,%rcx
  4011d0:	eb eb                	jmp    4011bd <phase_6+0xc9>
  4011d2:	48 c7 42 08 00 00 00 	movq   $0x0,0x8(%rdx)
  4011d9:	00 
  4011da:	bd 05 00 00 00       	mov    $0x5,%ebp
  4011df:	48 8b 43 08          	mov    0x8(%rbx),%rax
  4011e3:	8b 00                	mov    (%rax),%eax
  4011e5:	39 03                	cmp    %eax,(%rbx)
  4011e7:	7d 05                	jge    4011ee <phase_6+0xfa>
  4011e9:	e8 4c 02 00 00       	callq  40143a <explode_bomb>
  4011ee:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
  4011f2:	83 ed 01             	sub    $0x1,%ebp
  4011f5:	75 e8                	jne    4011df <phase_6+0xeb>
  4011f7:	48 83 c4 50          	add    $0x50,%rsp
  4011fb:	5b                   	pop    %rbx
  4011fc:	5d                   	pop    %rbp
  4011fd:	41 5c                	pop    %r12
  4011ff:	41 5d                	pop    %r13
  401201:	41 5e                	pop    %r14
  401203:	c3                   	retq   

